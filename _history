{"entries":[{"timestamp":1737848436554,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":75},{"diffs":[[0,"ver\""],[-1," x=\"0\" y=\"0\""],[0,"></b"]],"start1":107,"start2":107,"length1":20,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"microturtle\": \"github:ssande-fwd/pxt-microturtle-steve#7079369118ef1c2a62e8ff6d0339e004c532a0b5\",\n        \"pxt-fwd-edu\": \"github:climate-action-kits/pxt-fwd-edu#v1.45.2\""],[0,"\n"],[1,""],[0,"    "]],"start1":131,"start2":131,"length1":189,"length2":9},{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":228,"start2":228,"length1":32,"length2":31}]}]},{"timestamp":1737849222342,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"crophone\": \"*\",\n"],[1,"        \"microturtle\": \"github:ssande-fwd/pxt-microturtle-steve#7079369118ef1c2a62e8ff6d0339e004c532a0b5\",\n"],[0,"        \"pxt-fwd"]],"start1":121,"start2":121,"length1":32,"length2":139}]}]},{"timestamp":1737849594020,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"device_forever\" x=\"0\" y=\"0\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":62}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"enum TurtlePenMode {\n    //% block=\"down\"\n    Down,\n    //% block=\"up\"\n    Up\n}\n/**\n * Turtle graphics blocks\n */\n//% weight=100 color=#0f9c11 icon=\"\\uf188\"\nnamespace turtle {\n    let _x: number;\n    let _y: number;\n    let _direction: number; // 0 right, 1 down, 2 left, 3 top\n    let _brightness: number;\n    let _penMode: TurtlePenMode = TurtlePenMode.Up;\n    let _img: Image;\n    let _delay = 250;\n\n    function init() {\n        if (!_img) {\n            led.setBrightness(255);\n            led.setDisplayMode(DisplayMode.Greyscale);\n            _x = 2;\n            _y = 2;\n            _direction = 3;\n            _brightness = 128;\n            _img = images.createImage(`\n                . . . . .\n                . . . . .\n                . . . . .\n                . . . . .\n                . . . . .\n                `)\n            basic.clearScreen();\n        }\n    }\n\n    function paint() {\n        // plot background\n        _img.plotImage();\n        // plot turtle\n        led.plotBrightness(_x, _y, 255);\n        // slow down\n        basic.pause(_delay);\n    }\n\n    /**\n     * Moves the turtle for the given amount of pixels\n     * @param steps number of steps, eg: 1\n     */\n    //% blockId=turtleForward block=\"forward %steps|steps\"\n    //% weight=99 blockGap=8\n    export function forward(steps: number): void {\n        init();\n        if (!steps) return;\n\n        const sign = steps > 0 ? 1 : -1;\n        const dx = _direction == 0 ? sign : _direction == 2 ? -sign : 0;\n        const dy = _direction == 1 ? sign : _direction == 3 ? -sign : 0;\n        const n = Math.abs(steps);\n        for (let i = 0; i < n; ++i) {\n            // paint if pen down\n            if (_penMode == TurtlePenMode.Down)\n                _img.setPixelBrightness(_x, _y, _brightness);\n            // paint and update\n            setPosition(_x + dx, _y + dy);\n        }\n    }\n\n    /**\n     * Moves back by the given number of steps\n     * @param steps number of steps to move, eg: 1\n     */\n    //% blockId=turtleBack block=\"back %steps|steps\"\n    //% weight=98 blockGap=8\n    export function back(steps: number): void {\n        forward(-steps);\n    }\n\n    function turn(quadrants: number): void {\n        init();\n        _direction = (_direction + quadrants) % 4; if (_direction < 0) _direction += 4;\n    }\n\n    /**\n     * Turns left by 90 degrees\n     */\n    //% blockId=turtleTurnLeft block=\"turn left\"\n    //% weight=89 blockGap=8\n    export function turnLeft(): void {\n        turn(-1);\n    }\n\n    /**\n     * Turns right by 90 degrees\n     */\n    //% blockId=turtleTurnRight block=\"turn right\"\n    //% weight=88 blockGap=8\n    export function turnRight(): void {\n        turn(1);\n    }\n\n\n    /**\n     * Sets the turtle position\n     * @param x the horizontal position from 0 (left) to 4 (right), eg: 2\n     * @param y the vertical position from 0 (top) to 4 (bottom), eg: 2\n     */\n    //% x.min=0 x.max=4\n    //% y.min=0 y.max=4\n    //% blockId=turtleSetPosition block=\"set position x: %x|y: %y\"\n    //% weight=87\n    export function setPosition(x: number, y: number): void {\n        init();\n        _x = x % 5; if (_x < 0) _x += 5;\n        _y = y % 5; if (_y < 0) _y += 5;\n        paint();\n    }\n\n    /**\n     * Puts the pen down or up\n     */\n    //% blockGap=8\n    //% blockId=turtlePen block=\"pen %mode\"\n    //% weight=65\n    export function pen(mode: TurtlePenMode): void {\n        init();\n        _penMode = mode;\n        paint();\n    }\n\n    /**\n     * Moves the turtle to the center of the screen \n     */\n    //% blockGap=8\n    //% blockId=turtleHome block=\"home\"\n    export function home(): void {\n        setPosition(2, 2);\n        _direction = 3;\n    }\n\n    /** \n     * Sets the brightness\n     * @param brightness the brightness of the trail left by the turtle, eg: 128\n     */\n    //% blockGap=8\n    //% brightness.min=0 brightness.max=255\n    //% blockId=turtleSetBrightness block=\"set brightess %brightness\"\n    export function setBrightness(brightness: number): void {\n        init();\n        _brightness = Math.max(0, Math.min(255, brightness));\n        paint();\n    }\n\n    /**\n     * Define the steps per second\n     * @param stepsPerSecond steps per second, eg: 25\n     */\n    //% blockGap=8\n    //% blockId=turtleSetSpeed block=\"set speed %speed\"\n    //% stepsPerSecond.min=1 stepsPerSecond.max=50\n    //% weight=10\n    export function setSpeed(stepsPerSecond: number): void {\n        if (stepsPerSecond <= 0) return;\n\n        _delay = Math.max(1, Math.min(50, Math.idiv(1000, stepsPerSecond)));\n    }\n\n    // auto-initialize\n    init()\n    paint()\n}"],[1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":4565,"length2":33}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"5.2\""],[-1,",\n        \"microturtle\": \"github:ssande-fwd/pxt-microturtle-steve#7079369118ef1c2a62e8ff6d0339e004c532a0b5\""],[0,"\n   "]],"start1":204,"start2":204,"length1":115,"length2":8},{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":296,"start2":296,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1737848436553,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1737849823047}